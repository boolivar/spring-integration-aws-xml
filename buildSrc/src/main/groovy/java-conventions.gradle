plugins {
    id "java-library"
    id "jacoco"
    id "pmd"
    id "checkstyle"
    id "com.github.spotbugs"
    id "io.github.boolivar.jdoctest.jdoc-spock"
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(Javadoc).configureEach {
    options.addBooleanOption("Xdoclint:none", true)
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

tasks.named("test") {
    useJUnitPlatform()
    finalizedBy "jacocoTestReport"
}

tasks.named("jacocoTestReport") {
    reports {
        xml.required = true
    }
}

tasks.named("jacocoTestCoverageVerification") {
    dependsOn "test"
    violationRules {
        rule {
            limit {
                minimum = jacocoMinRatio as BigDecimal
            }
        }
    }
}

tasks.named("check") {
    dependsOn "jacocoTestCoverageVerification"
    dependsOn "jdocSpockTest"
}

checkstyle {
    configDirectory = file("$rootDir/gradle/config/checkstyle")
    toolVersion = com.puppycrawl.tools.checkstyle.Checker.package.implementationVersion
}

pmd {
    consoleOutput = true
    ruleSets = ["ruleset.xml"]
    toolVersion = net.sourceforge.pmd.PMDVersion.VERSION
}

pmdTest {
    ruleSets = ["test-ruleset.xml"]
}

tasks.withType(Pmd).configureEach {
    pmdClasspath += files("$rootDir/gradle/config/pmd")
}

spotbugs {
    omitVisitors = ["FindReturnRef"]
}

repositories {
    mavenCentral()
}

configurations {
    internalPlatform {
        visible = false
    }
    [compileClasspath, runtimeClasspath, testCompileClasspath, testRuntimeClasspath, jdocSpockCompileClasspath, jdocSpockRuntimeClasspath].each {
        it.extendsFrom internalPlatform
    }
    testImplementation.extendsFrom compileOnly
}

dependencies {
    internalPlatform platform(project(":platform"))

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.springframework"
        exclude group: "org.springframework.boot"
    }
}